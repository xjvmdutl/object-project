package com.gmarket.objectproject;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * 메인 함수로서의 시스템
 * 분해 기준을 기능과 데이터 중 기능을 위주로 분해를 진행해 왔다 -> 알고리즘 분해, 기능분해
 * 기능 분해의 관점에서 추상화의 단위는 프로시저이며, 시스템은 프로시저를 단위로 분해된다. -> 반복 실행되거나, 유사하게 실행되는 작업들을 한곳에 모아놓으면서 로직을 재사용, 중복을 방지할 수 있다.
 * 프로시저 추상화라고 부르는 이유는 내부의 상세한 구현 내용을 모르더라도 인터페이스만 알면 프로시저를 사용할 수 있기 때문이다.
 * 전통적인 기능 분해 방식은 하향식 접근법을 따르며, 시스템을 구성하는 가장 최상위 기능을 정의하고 이 최상위 기능을 좀 더 작은 단계의 하위 기능으로 분해해 나가는 방법을 말한다.
 * 분해는 세분화된 마지막 하위 기능이 프로그래밍 언어로 구현 가능한 수준이 될때까지 계속 되며, 각 세분화 단계는 바로 위 단계보다 구체적이어야 한다.
 *
 * 급여 관리 시스템
 * 기능 분해의 결과는 최상위 기능을 수행하는 데 필요한 절차들을 실행되는 시간 순서에 따라 나열한 것이다.
 * 기능 분해 방법에서는 기능을 중심으로 필요한 데이터를 결정하며, 기능이 우선이고 데이터는 기능의 뒤를 따른다.
 * 기능 분해를 위한 하향식 접근법은 먼저 필요한 기능을 생각하고 이 기능을 분해하고 정제하는 과정에서 필요한 데이터의 종류와 저장 방식을 식별한다.
 * 이것은 유지보수에 다양한 문제를 야기한다.
 *
 * 하향식 기능 분해는 시스템을 최상위의 가장 추상적인 메인 함수로 정의하고 메인 함수를 구현 가능한 수준까지 세부적인 단계로 분해하는 방식이다
 * 하향식 기능 분해 방식으로 설계한 시스템은 메인 함수를 루트로 하는 트리로 표현 할 수 있다.
 * 트리에서 각 노드는 시스템을 구성하는 하나의 프로시저를 의미하고 한 노드의 자식 노드는 부모 노드를 구현하는 절차 중의 한 단계를 의미한다.
 *
 * 하향식 기능 분해의 문제점
 * - 시스템은 하나의 메인 함수로 구성돼 있지 않다.
 * - 기능 추가나 요구사항 변경으로 인해 메인 함수를 빈번하게 수정해야 한다.
 * - 비즈니스 로직이 사용자 인터페이스와 강하게 결합된다.
 * - 하향식 분해는 너무 이른 시기에 함수들의 실행 순서를 고정시키기 때문에 유연성과 재사용성이 저하된다.
 * - 데이터 형식이 변경될 경우 파급 효과를 예측할 수 없다.
 *
 * 시스템은 하나의 메인 함수로 구성돼 있지 않다.
 * 대부분의 경우 추가되는 기능은 최초에 배포된 메인 함수의 일부가 아닐 것이다. 결국 처음에는 중요하게 생각됐던 메인 함수는 동등하게 중요한 여러 함수들 중 하나로 전락하고 만다.
 * 대부분의 시스템에서 하나의 메인 기능이란 개념은 존재하지 않으며, 기능성 측면에서는 동등하게 독립적이고 완결된 하나의 기능을 표현한다.
 *
 * 기능 추가나 요구사항 변경으로 인해 메인 함수를 빈번하게 수정해야 한다.
 * 하나의 메인 함수를 유일한 정상으로 간주하는 하향식 기능 분해의 경우에는 새로운 기능을 추가할 때마다 매번 메인 함수를 수정해야한다.
 *
 * 비즈니스 로직이 사용자 인터페이스와 강하게 결합된다.
 * 하향식 접근법은 비즈니스 로직을 설계하는 초기 단계부터 입력 방법과 출력 양식을 함께 고민하도록 강요한다. -> 코드 안에 비즈니스 로직과 사용자 인터페이스 로직이 밀접하게 결합된다.
 * 문제는 비즈니스 로직과 사용자 인터페이스가 변경되는 빈도가 다른 것이다 -> 사용자 인터페이스는 시스템 내에서 가장 자주 변경되는 부분이지만 비즈니스 로직은 인터페이스에 비해 변경 빈도가 적다.
 * 하향식 접근법은 근본적으로 변경에 불안정한 아키텍처를 낳는다. -> 사용자의 인터페이스를 변경하는 유일한 방법은 전체 구조를 재 설계하는 방법뿐이다.
 *
 * 하향식 분해는 너무 이른 시기에 함수들의 실행 순서를 고정시키기 때문에 유연성과 재사용성이 저하된다.
 * 하향식 분해는 설계를 시작하는 시점부터 시스템이 무엇을 해야하는지가 아니라 어떻게 동작해야 하는지에 집중하도록 만든다.
 * 하향식 접근법의 설계는 처음부터 구현을 염두에 두기 때문에 자연스럽게 함수들의 실행 순서를 정의하는 시간 제약을 강조한다.
 * 실행 순서나 조건, 반복과 같은 제어 구조를 미리 결정하지 않고는 분해를 진행할 수 없기 떄문에 기능 분해 방식은 중앙집중 제어 스타일의 형태를 띨 수 밖에 없다.
 * 결과적으로 모든 중요한 제어 흐름의 결정이 상위 함수에서 이뤄지고 하위 함수는 상위 함수의 흐름에 따라 적절한 시점에 호출된다.
 * 문제는 중요한 설계 결정사항인 함수의 제어 구조가 빈번한 변경의 대상이라는 점이고, 기능이 추가/변경 될 때마다 초기에 결정된 함수들의 제어 구조가 올바르지 않다는 것이 판명된다.
 * -> 기능을 추가하거나 변경하는 작업은 매번 기존에 결정된 함수의 제어구조를 변경하도록 만든다.
 * 이 문제를 해결할 수 있는 방법은 자주 변경되는 시간적인 제약에 대한 미련을 버리고 좀 더 안정적인 논리적 제약을 설계의 기준으로 삼는 것이다.
 * 하향식 접근법을 통해 분해한 함수들은 재사용하기도 어렵다 -> 모든 함수는 상위함수를 분해하는 과정에서 필요에 따라 식별되며, 그에 따라 상위함수가 강요하는 문맥 안에서만 의미를 가지기 떄문이다.
 * 하향식 설계와 관련된 모든 문제의 원인은 결합도이며, 함수는 상위 함수가 강요하는 문맥에 강하게 결합된다.
 *
 * 데이터 형식이 변경될 경우 파급 효과를 예측할 수 없다.
 * 하향식 기능 분해의 가장 큰 문제는 어떤 데이터를 어떤 함수가 사용하고 있는지를 추적하기 어렵다는 것이다.
 * 데이터 변경으로 인한 영향을 최소화하려면 데이터와 함께 변경되는 부분과 그렇지 않은 부분을 명확하게 분리해야한다.
 *
 *
 * 하향식 분해가 유용한 경우는 설계가 어느정도 안정화된 후에는 설계의 다양한 측면을 논리적으로 설명하고 문서화하기에 용이하다는 점이다.
 */
@SpringBootApplication
public class ObjectProjectApplication {
  public static void main(String[] args) {
    SpringApplication.run(ObjectProjectApplication.class, args);
  }
}
