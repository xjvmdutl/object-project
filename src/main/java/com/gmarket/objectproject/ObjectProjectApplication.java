package com.gmarket.objectproject;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * 책임이란 무엇인가
 * 책임: 협력에 참여하기 위해 객체가 수행하는 행동 => 객체에 의해 정의되는 응집도 있는 행위의 집합으로, 객체가 유지해야 하는 정보와 수행할 수 있는 행동에 대해 개략적으로 서술한 문장
 * 책임은 크게 무엇을 알고 있는가(아는 것), 무엇을 할 수 있는가(하는 것)으로 구성된다.
 * 협력 안에서 객체에게 할당한 책임이 외부의 인터페이스와 내부의 속성을 결정한다.
 * 일반적으로 책임과 메시지의 크기는 다르다 => 책임은  객체가 수행할 수 있는 행동을 종합적이고 간략하게 서술하기 때문에 메시지보다 추상적이고 개념적으로도 더 크다.
 * 책임의 관점에서 "아는 것", "하는 것"이 밀접하게 연관돼 있다.
 * 객체는 자신이 맡은 책임을 수행하는데 필요한 정보를 알고 있을 책임이 있고, 객체는 자신이 할 수 없는 작업을 도와줄 객체를 알고 있을 책임이 있다.
 * 협력이 중요한 이유는 객체에게 할당할 책임을 결정할 수 있는 문맥을 제공하기 때문이다 => 적절한 협력이 적절한 책임을 제공하고 적절한 책임을 적절한 객체에게 할당해야만 단순하고 유연한 설계를 창조할 수 있다.
 *
 * 책임 할당
 * 자율적인 객체를 만드는 가장 기본적인 방법은 책임을 수행하는 데 필요한 정보를 가장 잘 알고 있는 전문가에게 책임을 할당하는 것으로 이를 책임 할당을 위한 정보 전문가 패턴이라고 한다.
 * 객체들 또한 협력에 필요한 지식과 방법을 가장 잘 알고 있는 객체에게 도움을 요청해야 한다. 요청에 응답하기 위해 필요한 이 행동이 객체가 수행할 책임으로 이어지는 것이다.
 * 따라서 객체에게 책임을 할당하기 전에 협력이라는 문맥을 정의해야하는데 협력을 설계하는 출발점은 시스템이 사용자에게 제공하는 기능을 시스템이 담당할 하나의 책임으로 바로보는 것이다.
 * 객체지향 설계는 시스템의 책임을 완료하는 데 필요한 더 작은 책임을 찾아내고 이를 객체들에게 할당하는 반복적인 과정을 통해 모양을 갖춰간다.
 * 객체지향 설계는 협력에 필요한 메시지를 찾고 메시지에 적절한 객체를 선택하는 반복적인 과정을 통해 이뤄지며 이런 메시지가 메시지를 수신할 객체의 책임을 결정한다.
 * 어떤 경우에는 응집도와 결합도의 관점에서 정보 전문가가 아닌 다른 객체에게 책임을 할당하는 것이 더 적절한 경우도 있는데, 기본적인 전략은 책임을 수행할 정보전문가를 찾는것이다.
 * => 정보 전문가에게 책임을 할당하는 것만으로도 상태와 행동을 함께 가지는 자율적인 객체를 만들 가능성이 높아지기 떄문이다.
 *
 * 책임 주도 설계
 * 책임을 찾고 책임을 수행할 적절한 객체를 찾아 책임을 할당하는 방식으로 협력을 설계하는 방법을 책임 주도 설계라고 부른다.
 * 책임 주도 설계의 과정은 아래와 같다
 * 1) 시스템이 사용자에게 제공해야 하는 기능인 시스템 책임을 파악한다.
 * 2) 시스템 책임을 더 작은 책임으로 분할한다
 * 3) 분할된 책임을 수행할 수 있는 적절한 객체 또는 역할을 찾아 책임을 할당한다.
 * 4) 객체가 책임을 수행하는 도중 다른 객체의 도움이 필요한 경우 이를 책임질 적절한 객체 또는 역할을 찾는다.
 * 5) 해당 객체 또는 역할에게 책임을 할당함으로써 두 객체가 협력하게 한다.
 * 협력은 객체를 설계하기 위한 구체적인 문맥을 제공한다. 협력이 책임을 이끌어내고 책임이 협력에 참여할 객체를 결정한다.
 * 책임 주도 설계는 자연스럽게 객체의 구현이 아닌 책임에 집중할 수 있게 하며, 구현이 책임에 집중하는것이 중요한 이유는 유연하고 견고한 객체지향 시스템을 위해 가장 중요한 재료가 책임이기 때문이다.
 *
 * 메시지가 객체를 결정한다
 * 객체에게 책임을 할당하는 데 필요한 메시지를 먼저 식별하고 메시지를 처리할 객체를 나중에 선택했다는 것이 중요하다 -> 메시지가 객체를 선택하게 했다.
 * 장점
 * 1) 객체가 최소한의 인터페이스를 가질 수 있게 된다: 필요한 메시지가 식별될 때까지 객체의 퍼블릭 인터페이스에 어떤것도 추가하지 않기 때문에 객체는 애플리케이션에 크지도 작지도 않은 꼭 필요한 크기의 퍼블릭 인터페이스를 가질 수 있다.
 * 2) 객체는 충분히 추상적인 인터페이스를 가질 수 있게 한다: 메시지는 외부의 객체가 요청하는 무언가를 의미하기 때문에 메시지를 먼저 식별하면 무엇을 수행할지에 초첨을 맞추는 인터페이스를 얻을 수 있다.
 *
 * 행동이 상태를 결정한다
 * 객체를 객체답게 만드는 것은 객체의 상태가 아니라 객체가 다른 객체에게 제공하는 행동이다. 객체가 협력에 적합한지를 결정하는 것은 그 객체의 상태가 아니라 행동이다.
 * 데이터 주도 설계(객체의 내부 구현에 초점을 맞춘 설계 방식)은 객체의 내부 구현이 객체의 퍼블릭 인터페이스에 노출되도록 만들기 때문에 캡슐화를 저해하며, 객체의 내부 구현을 변경하면 퍼블릭 인터페이스, 의존하는 클라이언트까지 영향이 전파된다.
 * 캡슐화를 위반하지 않도록 구현에 대한 결정을 뒤로 미루면서 객체의 행위를 고려하기 위해서는 항상 협력이라는 문맥 안에서 객체를 생각해야한다.
 * 개별 객체의 상태와 행동이 아닌 시스템의 기능을 구현하기 위한 협력에 초점을 맞춰야만 응집도가 높고 결합도가 낮은 객체들을 찾조할 수 있다.
 */
@SpringBootApplication
public class ObjectProjectApplication {
  public static void main(String[] args) {
    SpringApplication.run(ObjectProjectApplication.class, args);
  }

}
