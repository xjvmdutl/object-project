package com.gmarket.objectproject;

public class Theater {

  private TicketSeller ticketSeller;

  public Theater(TicketSeller ticketSeller) {
    this.ticketSeller = ticketSeller;
  }

  /**
   * 좋은 설계란 오늘 요구하는 기능을 온전히 수행하면서, 내일의 변경을 매끄럽게 수용할 수 있는 설계이다.
   * -> 요구 사항은 항상 변경되기 떄문에 개발 시작 시점에 모든 요구사항을 수집하는 것은 불가능에 가깝다.
   * 변경을 수용할 수 있는 설계가 중요한 또 다른 이유는 코드를 변경할 때 버그가 추가될 가능성이 높기 때문이다.
   * 객체지향 프로그래밍은 의존성을 효율적으로 통제할 수 있는 다양한 방법을 제공함으로서 요구사항 변경에 좀 더 수월하게 대응할 수 있는 가능성을 높혀준다
   * 객체지향 패러다임은 세상에 존재하는 모든 자율적인 존재처럼 객체 역시 자신의 데이터를 스스로 책임지는 자율적인 존재로 생각하고,예상하는 방식으로 객체가 행동하리라는것을 보장함으로써 코드를 쉽게 이해할 수 있게 한다.
   * 객체지향의 세계에서 애플리케이션은 객체들로 구성되며, 애플리케이션의 기능은 객체들 간의 상호작용을 통해 구현된다. 그리고 객체들 사이의 상호작용은 객체 사이에 주고 받는 메시지로 표현된다.
   * 훌룡한 객체지향 설계란 협력하는 객체 사이의 의존성을 적절하게 관리하는 설계다. 객체는 실행된느 주변 환경에 강하게 결합될수록 변경하기 어려워진다.
   */
  public void enter(Audience audience) {
    ticketSeller.sellTo(audience);
  }
}
