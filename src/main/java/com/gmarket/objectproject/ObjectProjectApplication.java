package com.gmarket.objectproject;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * 다형성은 self 참조가 가리키는 현재 객체에게 메시지를 전달하는 특성을 기반으로 한다.
 * 동일한 타입의 객체 참조에게 동일한 메시지를 전송하더라도 self 참조가 가리키는 객체의 클래스가 무엇이냐에 따라 메서드 탐색을 위한 문맥이 달라진다.
 *
 * 위임과 self 참조
 * 위임: 자신이 수신한 메시지를 다른 객체에게 동일하게 전달해서 처리를 요청하는 것
 * 위임은 본질적으로 자신이 정의하지 않거나 처리할 수 없는 속성 또는 메서드의 탐색 과정을 다른 객체로 이동시키기 위해 사용한다.
 * 이를 위해 위임은 항상 현재의 실행 문맥을 가리키는 self 참조를 인자로 전달하는데 이것이 self 참조를 전달하지 않는 포워딩과의 차이점이다.
 * 객체가 다른 객체에게 요청을 처리할 떄 인자로 self를 전달하지 않을 수도 있는데 이것은 요청을 전달받은 최초의 객체에 다시 메시지를 전송할 필요는 없고 단순히 코드를 재사용하고 싶은 경우이다.
 * 처리를 요청할 때 self 참조를 전달하지 않는 경우를 포워딩이라고 부른다.
 * 위임은 self 참조를 전달하며, 클래스를 이용한 상속 관계를 객체사이의 합성 관계로 대체해서 다형성을 구현할 때 사용하는 용도이다.
 * 상속이 매력적인 이유는 우리가 직접 구현해야 하는 이런 번잡한 과정을 자동으로 처리해 준다는 점이다.
 * 간단하게 GradeLecture를 Lecture의 자식 클래스로 선언하면, 실행 시에 인스턴스들 사이에서 self 참조가 자동으로 전달되며, 이 self 참조의 전달은 결과적으로 자식 클래스의 인스턴스와 부모 클래스의 인스턴스 사이에 동일한 실행 문맥을 공유할 수 있게 해준다.
 * 상속은 동적으로 메서드를 탐색하기 위해 현재의 실행 문맥을 가지고 있는 self 참조를 전달한다. 그리고 이 객체들 사이에서 메시지를 전달하는 과정은 자동으로 이뤄진다(자동적인 메시지 위임)
 *
 * 프로토타입 기반의 객체지향 언어
 * 클래스 기반의 객체지향 언어들이 상속을 이용해 클래스 사이에 self 참조를 자동으로 전달하는 것처럼 프로토타입 기반의 객체지향 언어들 역시 위임을 이용해 객체 사이에 self 참조를 자동으로 전달한다.
 * 자바스크립트의 모든 객체들은 다른 객체를 가리키는 용도로 사용되는 prototype이라는 이름의 링크를 가진다. -> 언어 차원에서 제공되기 때문에 self 참조를 직접 전달하거나 메시지 포워딩을 번거롭게 직접 구현할 필요가 없다.
 * 자바스크립트에서 인스턴스는 메시지를 수신하면 먼저 메시지를 수신한 객체의 prototype 안에서 메시지에 응답할 적절한 메서드가 존재하는지 검사하고 만약 존재하지 않는다면, prototype이 가리키는 객체를 따라 메시지 처리를 자동으로 위임한다.
 * prototype 체인으로 연결된 객체 사이에 메시지를 위임함으로써 상속을 구현할 수 있다.
 * 클래스 없이도 객체사이의 협력 관계를 구축하는 것이 가능하며 상속 없이도 다형성을 구현하는 것이 가능하다.
 * 클래스 기반의 상속과 객체 기반의 위임 사이에 기본 개념과 메커니즘을 공유한다는 점이 중요하다.
 */
@SpringBootApplication
public class ObjectProjectApplication {
  public static void main(String[] args) {
    SpringApplication.run(ObjectProjectApplication.class, args);
  }
}
