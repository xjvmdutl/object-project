package com.gmarket.objectproject;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * 개방-폐쇄 원칙
 * 소프트웨어 개체(클래스, 모듈, 함수)는 확장에 대해 열려 있어야 하고, 수정에 대해서는 닫혀 있어야 한다.
 * - 확장에 대해 열려있다: 애플리케이션의 요구사항이 변경될 때 이 변경에 맞게 새로운 동작을 추가해서 애플리케이션의 기능을 확장할 수 있다.
 * - 수정에 대해 닫혀있다: 기존의 코드를 수정하지 않고도 애플리케이션의 동작을 추가하거나 변경할 수 있다.
 * 개방-폐쇄 원칙은 유연한 설계란 기존의 코드를 수정하지 않고도 애플리케이션의 동작을 확장할 수 있는 설계라고 이야기한다.
 *
 * 컴파일 타임 의존성을 고정시키고 런타임 의존성을 변경하라
 * 런타임 의존성은 실행시에 협력에 참여하는 객체들 사이의 관계고, 컴파일타임 의존성은 코드에서 드러나는 클래스들 사이의 관계이다.
 * 유연하고 재사용 가능한 설계에서 런타임 의존성과 컴파일타임 의존성은 서로 다른 구조를 가진다.
 * 새로운 할인 정책을 추가해서 기능을 확장할 수 있도록 허용하므로 확장에 대해서는 열려있다.
 * 기존 코드를 수정할 필요 없이 새로운 클래스를 추가하는 것만으로 새로운 할인 정책을 확장할 수 있기 때문에 수정에 대해서는 닫혀있다.
 * 개방-폐쇄 원칙을 수용하는 코드는 컴파일타임 의존성을 수정하지 않고도 런타임 의존성을 쉽게 변경할 수 있다.
 * 의존성 관점에서 개방-폐쇄의 원칙을 따르는 설계란 컴파일타임 의존성은 유지하면서, 런타임 의존성의 가능성을 확장하고 수정할 수 있는 구조라고 할 수 있다.
 *
 * 추상화가 핵심이다.
 * 개방-폐쇄 원칙의 핵심은 추상화에 의존하는 것이다.
 * 추상화란 핵심적인 부분만 남기고 불필요한 부분은 생략함으로써 복잡성을 극복하는 기법으로 추상화 과정을 거치면, 문맥이 바뀌더라도 변하지 않는 부분만 남게 되고 문맥에 따라 변하는 부분은 생략된다.
 * 추상화를 사용하면 생략된 부분을 문맥에 적합한 내용으로 채워넣음으로써 각 문맥에 적합하게 기능을 구체화하고 확장할 수 있다.
 * 공통적인 부분은 문맥이 바뀌더라도 변하지 않아야한다. -> 수정할 필요가 없어야 함으로 추상화 부분은 수정에 닫혀 있다.
 * 추상화를 통해 생략된 부분은 확장의 여지를 남기기 때문에 이것이 추상화가 개방-폐쇄 원칙을 가능하게 만드는 이유다.
 * 변하지 않는 부분을 고정하고 변하는 부분을 생략하는 추상화 메커니즘이 개방-폐쇄 원칙의 기반이 된다. -> 언제라도 추상화의 생략된 부분을 채워넣음으로써 새로운 문맥에 맞게 기능을 확장할 수 있다.(추상화는 설계의 확장을 가능하게 한다)
 * 단순히 어떤 개념을 추상화 했다고 해서, 수정에 대해 닫혀있는 설계를 만들 수 있는 것은 아니다.
 * 개방-폐쇄의 원칙에서 폐쇄를 가능하게 하는 것은 의존성의 방향이므로 수정에 대한 영향을 최소화하기 위해서는 모든 요소가 추상화에 의존해야 한다.
 * 명시적 의존성과 의존성 해결 방법을 통해 컴파일타임 의존성을 런타임 의존성으로 대체함으로써 실행 시에 객체의 행동을 확장할 수 있다.
 * 올바른 추상화를 설계하고 추상화에 대해서만 의존하도록 관계를 제한함으로써 설계를 유연하게 확장할 수 있다.
 * 변경에 의한 파급효과를 최대한 피하기 위해서는 변하는 것과 변하지 않는 것이 무엇인지를 이해하고 이를 추상화의 목적으로 삼아야만 한다.
 * 추상화가 수정에 대해 닫혀 있을 수 있는 이유는 변경되지 않을 부분을 신중하게 결정하고 올바른 추상화를 주의 깊게 선택했기 때문이라는 사실을 기억하자
 *
 */
@SpringBootApplication
public class ObjectProjectApplication {
  public static void main(String[] args) {
    SpringApplication.run(ObjectProjectApplication.class, args);
  }
}
