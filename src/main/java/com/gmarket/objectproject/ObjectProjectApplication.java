package com.gmarket.objectproject;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * Movie가 오직 DiscountPolicy라는 추상화에만 의존하기 위해서는 Movie 내부에서 AmountDiscountPolicy 같은 구체 클래스의 인스턴스를 생성해서는 안 된다.
 * movie의 할인 정책을 금액 할인 정책 -> 비율 할인 정책으로 변경할 수 있는 방법은 오직 AmountDiscountPolicy 생성 부분은 PercentDiscountPolicy로 코드를 직접 수정하는 방법 뿐이다.
 * 동작을 추가하거나 변경하기 위해 기존의 코드를 수정하돌고 만들기 떄문에 개방-폐쇄의 원칙을 위반한다.
 * 결합도가 높아질수록 개발-폐쇄 원칙을 따르는 구조를 설계하기가 어려워진다. -> 알아야 하는 지식이 많아질수록 결합도가 높아지기 때문에
 * 객체 생성에 대한 지식은 과도한 결합도를 초래하는 경향이 있는데, 객체의 타입과 생성자에 전달해야 하는 인자에 대한 과도한 지식은 코드를 특정 컨텍스트에 강하게 결합시킨다.
 * 컨텍스트를 바꾸기 위한 유일한 방법은 코드 안에 명시돼 있는 컨텍스트에 대한 정보를 직접 수정하는 것 뿐이다.
 * 객체 생성은 피할 수 없지만 현재 문제는 부적절한 곳에서 객체생성을 하는것이다. 동일한 클래스 안에서 객체생성과 사용이라는 두가지 이질적인 목적을 가진 코드가 공존하는 것이 문제이다.
 * 유연하고 재사용 가능한 설계를 원한다면 객체와 관련된 두 가지 책임을 서로 다른 객체로 분리해야 한다.
 * -> 하나는 객체를 생성, 다른 하나는 객체를 분리 즉, 객체에 대한 생성과 사용을 분리해야한다.
 * 사용으로부터 생성을 분리하는데 가장 보편적인 방법은 객체를 생성할 책임을 클라이언트로 옮기는 것이다. Movie에게 금액 할인을 적용할지, 비율 할인 정책을 적용할지는 그 시점에 movie와 협력할 클라이언트이기 떄문이다.
 * 혀재의 컨텍스트에 관한 결정권을 가지고 있는 클라이언트로 컨텍스트에 대한 지식을 옮김으로써 Movie는 특정한 클라이언트에 결합되지 않고 독립적일 수 있다.
 *
 * 순수한 가공물에게 책임 할당하기
 * 책임 할당의 가장 기본적인 원칙은 책임을 수행하는데 필요한 정보를 가장 많이 알고 있는 Information expert에게 책임을 할당하는 것이다.
 * 도메인 모델은 Information expert를 찾기 위해 참조할 수 있는 일차적인 재료로 어떤 책임을 할당하고 싶다면 제일 먼저 도메인 모델 안의 개념 중에서 적절한 후보가 존재하는지 찾아봐야 한다.
 * Factory는 도메인 모델이 아닌 순수한 기술적으로 선택한 모델이다. -> 전체적인 결합도를 낮추고 재사용성을 높이기 위해 객체 생성 책임을 도메인 개념과는 연관없는 가공의 객체로 이동한 것이다.
 * 크레이그 라만의 시스템을 객체로 분해하는 두가지 방식
 * - 표현적 분해: 도메인에 존재하는 사물 또는 개념을 표현하는 객체들을 이용해 시스템을 분해하는것, 도메인 모델에 담겨 있는 개념과 관례를 따르며 도메인과 소프트웨어 사이의 표현적 차이를 최소화하는 것을 목적으로 한다.
 * - 행위적 분해: 책임을 할당하기 위해 창조되는 도메인과 무관한 인공적인 객체 -> 모든 책임을 도메인 객체에게 할당하면 낮은 응집도, 높은 결합도, 재사용성 저하와 같은 심각한 문제에 직면하고 설계자가 편의를 위해 임의로 만들어낸 가공의 객체에게 책임을 할당해서 문제를 해결해야한다.
 * 어떤 행동을 추가하려고 하는데 이 행동을 책임질 마땅한 도메인 개념이 존재하지 않는다면 순수한 가공물(Pure Fabrication)을 추가하고 이 객체에 책임을 할당하라.
 * 그 결과로 Pure Fabrication는 보통 특정한 행동을 표현하는 것이 일반적이고 표현적 분해보다는 행위적 분해에 의해 생성되는것이 일반적이다.
 * 설계자로서의 우리의 역할은 도메인 추상화를 기반으로 애플리케이션 로직을 설계하는 동시에 품질의 측면에서 균형을 맞추는 데 필요한 객체들을 창조하는 것이다.
 * 도메인 개념을 표현하는 객체와 순수하게 창조된 가공의 객들이 모여 자신의 역할과 책임을 다하고 조화롭게 협력하는 애플리케이션을 설게하는 것이 목표여야한다.
 * 도메인의 본질적인 개념을 표현하는 추상화를 이용해 애플리케이션을 구축하기 시작하라 만약 도메인 개념이 만족스럽지 못한다면 주저말고 인공적인 객체를 창조하라.
 * 도메인을 반영하는 애플리케이션의 구조라는 제약안에서 실용적인 창조성을 발휘할 수 있는 능력은 훌룡한 설계자가 갖춰야 할 기본적인 자질이다.
 * 도메인 모델에서 출발해서 설계에 유연성을 추가하기 위해 책임을 이리저리 옮기다 보면 많은 Pure Fabrication을 추가하게 된다는 사실을 알게 될 것이다.
 * Factory는 객체의 생성 책임을 할당할만한 도메인 객체가 존재하지 않을 때 선택할 수 있는 Pure Fabrication이다.
 */
@SpringBootApplication
public class ObjectProjectApplication {
  public static void main(String[] args) {
    SpringApplication.run(ObjectProjectApplication.class, args);
  }
}
