package com.gmarket.objectproject;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * GRASP 패턴 : 일반적인 책임 할당을 위한 소프트웨어 패턴의 약자로 객체에게 책임을 할당할 때 지침으로 삼을 수 있는 원칙들의 집합을 패턴형식으로 정의한 것
 *
 * 도메인 개념에서 출발하기
 * 설계를 시작하기 전에 도메인에 대한 개략적인 모습을 그려보는 것이 유용하다.
 * 도메인 안에는 무수히 많은 개념이 존재하며, 도메인 개념들을 책임 할당의 대상으로 사용하면 코드에 도메인의 모습을 투영하기가 좀 더 수월해진다.
 * 따라서 어떤 책임을 할당해야 할 때 가장 먼저 고민해야 하는 유력한 후보는 바로 도메인 개념이다
 * 설계를 시작하는 단계에서는 개념들의 의미와 관계가 정확하거나 완벽할 필요가 없다. 이 단계에서는 책임을 할당받을 객체들의 종류와 관계에 대한 유용한 정보를 제공할 수 있다면 충분하다.
 * 중요한 것은 설계를 시작하는 것이지 도메인 개념들을 완벽하게 정리하는 것이 아니다. 도메인 개념을 정리하는데 너무 많은 시간을 들이지 말고 빠르게 설계와 구현을 진행해라
 *
 * 정보 전문가에게 책임을 할당하라
 * 책임주도 설계 방식의 첫 단계는 애플리케이션이 제공해야 하는 기능을 애플리케이션의 책임으로 생각하는 것이다 -> 이 책임을 애플리케이션에 대해 전송된 메시지로 간주하고 이 메시지를 책임질 첫번째 객체를 선택하는 것으로 설계를 시작한다.
 * 책임을 수행할 때 필요한 메시지를 선택해야 하는데, 메시지는 메시지를 수신할 객체가 아니라 메시지를 전송할 객체의 의도를 반영해서 결정해야한다.
 * 첫번째 질문: 메시지를 전송할 객체는 무엇을 원하는가
 * 두번째 질문: 메시지를 수신할 적합한 객체는 누구인가
 * 두번째 질문에 답하기 위해서는 객체가 상태와 행동을 통합한 캡슐화의 단위라는 사실에 집중해야한다.
 * 정보 전문가 패턴: 책임을 객체에게 할당하는 원리중 하나로, 책임을 수행하는데 필요한 정보를 가지고 있는 객체에게 할당하는 패턴이다.
 * 정보 전문가 패턴은 객체가 자신이 소유하고 있는 정보와 관련된 작업을 수행한다는 일반적인 직관을 표현한 것이다.
 * 책임을 수행하는 객체가 정보를 알고 있다고 해서 그 정보를 저장하고 있을 필요는 없다 -> 객체는 해당 정보를 제공할 수 있는 다른 객체를 알고 있거나 필요한 정보를 계산해서 제공할 수도 있다.
 * 정보 전문가 패턴에 따르면 예매하는 데 필요한 정보를 가장 많이 알고 있는 객체에게 예매하라 메시지를 처리할 책임을 할당해야한다.
 * 만약 스스로 처리할 수 없는 작업이 있다면 외부로 도움을 요청해야하며, 이 요청이 외부로 전송해야 하는 새로운 메시지가 되고, 최종적으로 이 메시지가 새로운 객체의 책임으로 할당된다.
 * 이같은 연쇄적인 메시지 전송과 수신을 통해 협력 공동체가 구성되는 것이다.
 *
 * 높은 응집도와 낮은 결합도
 * 동일한 기능을 구현할 수 있는 무수히 많은 설계가 존재하며, 실제로 설계를 진행하다 보면 몇 가지 설계중에서 한가지를 선택해야하는 경우가 빈번히 발생한다.
 * 올바른 책임 할당을 위해서는 정보 전문가 패턴 이외의 다른 책임할당 패턴들을 함께 고려할 필요가 있다.
 * Movie 대신 Screening이 직접 DiscountCondition과 협력하여 할인 여부를 판단 후, Movie에 할인 여부를 전달해 주는 방식으로도 협력이 가능한데, 이는 이전 설계보다 좋지않다.
 * -> 그 이유는 응집도와 결합도에 있다.
 * 낮은 결합도 패턴: 설계의 전체적인 결합도가 낮게 유지되도록 책임을 할당하라
 * Screening은 DiscountCondition과 결합되어 있지 않지만, Movie는 이미 DiscountCondition과 결합되어 있다. 따라서 Movie와 DiscountCondition랑 결합하는 것이 설계 전체적으로 결합도를 추가 하지 않고도 협력을 완성할 수 있다.
 * 높은 응집도 패턴: 높은 응집도를 가지도록 책임을 할당하라
 * Screening의 가장 중요한 책임은 예매를 생성하는 것지만, 만약 Screening이 DiscountCondition과 협력한다면, Screening이 영화 요금 계산과 관련된 일부 책임을 떠안아야한다.
 * 즉, 예매 요금을 계산하는 방식이 변경될 경우 Screening도 함께 변경되어야한다.-> Screening은 서로 다른 이유로 변경되는 책임을 짊어지게 되므로 응집도가 낮아질 수 밖에 없다
 * Movie의 주된 책임은 영화요금을 계산하는 것으로 영화 요금을 계산하는데 필요한 할인조건을 판단하기 위해 DiscountCondition과 협력하는 것은 응집도에 아무러 해도 끼치지 않는다.
 *
 * 창조자에게 객체 생성 책임을 할당하라
 * 영화 예매 협력의 최종 결과물은 reservation 인스턴스를 생성하는 것이다. 이는 협력에 참여하는 어떤 객체에게는 Reservation 인스턴스를 생성할 책임을 할당해야 한다는 것을 의미한다.
 * 창조자 패턴은 책임 할당 패턴으로서 객체를 생성할 책임을 어떤 객체에게 할당할지에 대한 지침을 제공한다.
 * 창조자 패턴: 어떤 방식으로든 생성되는 객체와 연결되거나 관련될 필요가 있는 객체에 해당 객체를 생성할 책임을 맡기는 것이다.
 * 생성될 객체에 대해 잘 알고 있어야 하거나 그 객체를 사용해야하는 객체는 어떤 방식으로든 생성될 객체와 연결될 것이고, 두 객체는 결합될 것이다. -> 창조자 패턴은 이미 존재하는 객체사이의 관계를 이용하기 때문에 설계가 낮은 결합도를 유지할 수 있도록 한다.
 *
 */
@SpringBootApplication
public class ObjectProjectApplication {
  public static void main(String[] args) {
    SpringApplication.run(ObjectProjectApplication.class, args);
  }

}
