package com.gmarket.objectproject;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * 역할과 협력
 * 객체가 어떤 특정한 협력 안에서 수행하는 책임의 집합을 역할이라고 부른다.
 * 책임 할당 과정: 적절한 역할이 무엇인가를 찾는 과정 + 역할을 수행할 객체로 인스턴스를 선택하는 것이다.
 *
 * 유연하고 재사용 가능한 협력
 * 역할이 중요한 이유는 역할을 통해 유연하고 재사용 가능한 협력을 얻을 수 있기 떄무닝다.
 * 역할은 다른 것으로 교체할 수 있는 책임의 집합이다.
 * 동일한 책임을 수행하는 역할을 기반으로 두개의 협력을 하나로 통합할 수 있다 -> 역할을 이용하면 불필요한 코드 중복을 제거할 수 있고, 협력이 유연해진다.
 * 기술적 메커니즘들이 모여 유연하고 재사용 가능한 협력을 만들 수 있는 기반을 제공한다.
 *
 * 객체 대 역할
 * 역할은 객체가 참여할 수 있는 일종의 슬롯이다 -> 유용하고 재사용 가능한 설계라는 문맥에서 역할을 중요성은 매우 중요하다.
 * 협력에 참여하는 후보가 여러 종류의 객체에 의해 수행될 필요가 있다면 그 후보는 역할이 되지만 단지 한 종류의 객체만이 협력에 참여할 필요가 있다면 후보는 객체가 된다
 * 협력에 적합한 책임을 수행하는 대상이 한 종류라면 객체로 간주하고, 만약 여러 종류의 객체들이 참여할 수 있다면 역할이라고 부르면 된다.
 * 혁력은 역할들의 상호작용으로 구성되고, 협력을 구성하기 위해 역할에 적합한 객체가 선택되며, 객체는 클래스를 이용해 구현되고 생성된다.
 * 도메인 모델은 불완전한 사람들이 세상을 바라보는 모델에 기반하기 때문에 그 역시 동일한 불완전성을 가질 수 밖에 없다.
 * 설계 초반에는 적절한 책임과 협력의 큰 그림을 탐색하는것이 가장 중요한 목표여야 하고, 역할과 객체를 명확하게 구분하는 것은 그렇게 중요하지 않다.
 * -> 따라서 애매하다면 단순하게 객체로 시작하고 반복적으로 책임과 협력을 정제해가면서 필요한 순간에 객체로부터 역할을 분리해내는 것이 가장 좋은 방법이다.
 * 다양한 객체들이 협력에 참여한다는 것이 확실하다면 역할로 시작하라!! 단 모든 것이 안개 속에 둘러싸여 있고 정확한 결정을 내리기 힘든 상황이면 구체적인 객체로 시작하라
 * 다양한 시나리오를 탐색, 유사한 협력들을 단순화하고 합치다 보면 자연스럽게 역할이 그 모습을 드러낼것이다.
 * 역할 모델링: 역할을 설계의 중심 개념으로 본다.
 * 중요한 것은 협력을 구체적인 객체가 아니라 추상적인 역할의 관점에서 설계하면 협력이 유연하고 재사용 가능해진다는 것이다 -> 역할을 가장 큰 장점은 설계의 구성요소를 추상화할 수 있다는 것이다.
 *
 * 역할과 추상화
 * 추상화를 이용한 설계가 가지는 장점: 1) 추상화 계층만을 이용하면 중요한 정책을 상위 수준에서 단순화 할 수 있다. 2) 설계가 좀 더 유연해진다.
 * 역할은 공통의 책임을 바탕으로 객체의 종류를 숨기기 때문에 이런 관점에서 역할을 객체의 추상화로 볼 수 있다.
 * 협력이라는 관점에서는 세부적인 사항을 무시하고 추상화에 집중하는 것이 유용하다.
 * 상위 수준에서 협력을 설명하면 구체적인 객체들이 가지는 복잡성을 제거하고 단순화해서 표현할 수 있다.
 * 객체에게 중요한 것은 행동이며, 역할이 중요한 이유는 동일한 협력을 수행하는 객체들을 추상화할 수 있기 때문이다.
 * 역할은 다양한 환경에서 다양한 객체들을 수용할 수 있게 해주므로 협력을 유연하게 만든다. -> 협력 안에서 역할이라는 추상화를 이용하면 기존 코드를 수정하지 않고도 새로운 행동을 추가할 수 있다.
 * 프레임워크나 디자인 패턴과 같이 재사용 가능한 코드나 설계 아이디어를 구성하는 핵심적인 요소가 바로 역할이다.
 *
 * 배우와 배역
 * 연극의 배역과 배우 간의 관계
 * - 배역은 연극 배우가 특정 연극에서 연기하는 역할이다.
 * - 배역은 연극이 상영되는 동안에만 존재하는 일시적인 개념이다.
 * - 연극이 끝나면 연극 배우는 배역이라는 역할을 벗어 버리고 원래의 연극 배우로 돌아온다.
 * - 서로 다른 배우들이 동일한 배역을 연기할 수 있다.
 * - 하나의 배우가 다양한 연극 안에서 서로 다른 배역을 연기할 수 있다.
 * 연극 안에서 배역을 연기하는 배우라는 은유는 협력 안에서 역할을 수행하는 객체라는 관점이 가진 입체적인 측면들을 훌룡하게 담아낸다.
 * 협력은 연극과 동일하고 코드는 극본과 동일하다. -> 객체는 협력이라는 실행 문맥 안에서 특정한 역할을 수행한다, 객체는 협력이 끝나고 협력에서의 역할을 잊고 원래의 객체로 돌아올 수 있다.
 * 협력이라는 문맥 안에서 역할은 특정한 협력에 참여해서 책임을 수행하는 객체의 일부이다.
 * 역할은 객체가 협력에 참여하는 잠시 동안에만 존재하는 일시적인 개념으로 역할은 모양이나 구조에 의해 정의될 수 없으며 오직 시스템의 문맥안에서 무엇을 하는지에 의해서만 정의될 수 있다.
 * 동일한 역할을 수행하는 하나 이상의 객체들이 존재할 수 있다 -> 협력 관점에서 동일한 역할을 수행하는 객체들은 서로 대체 가능하다.
 * 객체는 여러 역할을 가질 수 있지만 특정한 협력안에서는 일시적으로 오직 하나의 역할만이 보여진다. -> 객체가 다른 협력에 참여할 때는 이전의 역할은 잊혀지고 해당 협력에서 바라보는 역할의 측면에서 보여질 것이다.
 * 객체는 다수의 역할을 보유할 수 있지만, 객체가 참여하는 특정 협력은 객체의 한 가지 역할만 바라 볼 수 있다.
 * 동일한 역할을 수행하는 객체들은 서로 대체 가능하다 -> 역할은 특정한 객체의 종류를 캡슐화하기 때문에 동일한 역할을 수행하고 계약을 준수하는 대체 가능한 객체들은 다형적이다.
 */
@SpringBootApplication
public class ObjectProjectApplication {
  public static void main(String[] args) {
    SpringApplication.run(ObjectProjectApplication.class, args);
  }

}
