package com.gmarket.objectproject;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * 정보 은닉과 모듈
 * 기능을 기반으로 시스템을 분해하는것이 아니라 변경의 방향에 맞춰 시스템을 분해해야한다.
 * 정보 은닉은 시스템을 모듈 단위로 분해하기 위한 기본 원리로 시스템에서 자주 변경되는 부분을 상대적으로 덜 변경되는 안정적인 인터페이스 뒤로 감춰야 한다는 것이 핵심이다.
 * 정보 은닉은 외부에 감춰야 하는 비밀에 따라 시스템을 분할하는 모듈 분할 원리다.
 * -> 모듈은 변경될 가능성이 있는 비밀을 내부로 감추고 잘 정의되고 쉽게 변경되지 않을 퍼블릭 인터페이스를 외부에 제공해서 내부의 비밀에 함부로 접근하지 못하게 한다.
 * 모듈과 기능 분해는 상호 배타적인 관계가 아니다. -> 기능 분해가 하나의 기능을 구현하기 위해 필요한 기능들을 순차적으로 찾아가는 탐색의 과정이라면 모듈 분해는 감춰야 하는 비밀을 선택하고 비밀 주변에 안정적인 보호막을 설치하는 보존의 과정이다.
 * 비밀을 결정하고 모듈을 분해한 후에는 기능 분해를 이용해 모듈에 필요한 퍼블릭 인터페이스를 구현할 수 있다.
 * 시스템을 모듈 단위로 분해하기 위해서는 시스템이 감춰야 하는 비밀을 찾아야하며, 외부에서 내부의 비밀에 접근하지 못하도록 커다란 방어막을 쳐서 에워싸야한다(퍼블릭 인터페이스)
 * 모듈이 감춰야 하는 비밀
 * - 복잡성: 모듈이 너무 복잡한 경우 이해하고 사용하기가 어렵다 -> 외부에 모듈을 추상화할 수 있는 간단한 인터페이스를 제공해서 모듈의 복잡도를 낮추자
 * - 변경 가능성: 변경 가능한 설계 결정이 외부에 노출될 경우 실제로 변경이 발생했을 때 파급효과가 커진다. 변경 발생시 하나의 모듈만 수정하면 되도록 변경 가능한 설계 결정을 모듈 내부로 감추고 외부에는 쉽게 변경되지 않을 인터페이스를 제공한다.
 *
 * 모듈의 장점과 한계
 * 장점
 * - 모듈 내부의 변수가 변경되더라도 모듈 내부에만 영향을 미친다.
 *   : 모듈을 사용하면 모듈 내부에 정의된 변수를 직접 참조하는 코드의 위치를 모듈 내부로 제한할 수 있다. -> 모듈은 데이터 변경으로 인한 파급효과를 제어할 수 있기 때문에 코드를 수정하고 디버깅하기가 더 용이해진다.
 * - 비지니스 로직과 사용자 인터페이스에 대한 관심사를 분리한다.
 *   : 사용자 입력과 화면 출력을 Employee 모듈이 아닌 외부에 두었으므로, GUI 같은 다른 형식의 사용자 인터페이스를 추가하더라도 Employees 모듈에 포함된 비즈니스 로직은 변경되지 않는다.
 * - 전역 변수와 전역함수를 제거함으로써 네임스페이스 오염을 방지한다.
 *   :변수와 함수를 모듈 내부에 포함시키기 때문에 다른 모듈에서도 동일한 이름을 사용할 수 있게 되므로 저녁 네임 스페이스의 오염을 방지하는 동시에 이름 충돌의 위험을 완화한다.
 * 모듈은 기능이 아니라 변경의 정도에 따라 시스템을 분해한다.
 * -> 각 모듈은 외부에 감춰야 하는 비밀과 관련성이 높은 데이터와 함수의 집합이므로 모듈 내부는 높은 응집도를 유지한다.
 * -> 모듈과 모듈 사이에는 퍼블릭 인터페이스를 통해서만 통신해야하므로 낮은 결합도를 유지한다.
 * 모듈이 정보은닉이라는 개념을 통해 데이터라는 존재를 설계의 중심 요소로 부각시켯다 -> 모듈 핵심은 데이터이다.
 * 메인 함수를 정의하고 필요에 따라 더 세부적인 함수로 분해하는 하향식 기능 분해와 달리 모듈은 감춰야 할 데이터를 결정하고 이 데이터플 조작하는 데 필요한 함수를 결정한다.
 * -> 모듈은 데이터와 함수가 통합된 한 차원 높은 추상화를 제공하는 설계 단위다.
 * 비록 모듈이 높은 추상화 개념을 제공하지만 태생적으로 변경을 관리하기 위한 구현 기법이기 때문에 추상화 관점에서의 한계점이 명확하다 -> 인스턴스의 개념을 제공하지 않는다.
 *
 */
@SpringBootApplication
public class ObjectProjectApplication {
  public static void main(String[] args) {
    SpringApplication.run(ObjectProjectApplication.class, args);
  }
}
