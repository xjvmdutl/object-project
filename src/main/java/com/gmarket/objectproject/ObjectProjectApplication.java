package com.gmarket.objectproject;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * 중복 코드는 사람들의 마음속에 의심과 불신의 씨앗을 뿌린다.
 *
 * Dry 원칙
 * 중복코드는 변경을 방해한다. -> 이것이 중복 코드를 제거할 가장 큰 이유
 * 중복 코드가 가지는 가장 큰 문제는 코드를 수정하는 데 필요한 노력을 몇 배로 증가시킨다는 것이다. -> 중복 코드를 찾고, 일관된 수정 및 테스트를 해야한다.
 * 중복 코드는 수정과 테스트에 드는 비용을 증가시킬뿐만 아니라 시스템과 우리를 공황상태로 몰아넣을 수도 있다.
 * 중복 여부를 판단하는 기준은 변경이다. ->중복 여부를 결정하는 기준은 코드가 변경에 반응하는 방식이다.
 * 신뢰할 수 있고 수정하기 쉬운 소프트웨어를 만드는 효과적인 방법 중 하나는 중복을 제거하는 것이다 -> dry("반복하지 마라") 원칙을 따라야 한다
 * Dry 원칙: 모든 지식은 시스템 내에서 단일하고, 애매하지 않고 정말로 믿을 만한 표현 양식을 가져야한다.
 * dry 원칙은 한 번, 단 한번 원칙 또는 단일 지점 제어 원칙이라고도 부른다.
 *
 * 중복 코드 수정하기
 * 수많은 코드 더미에서 어떤 코드가 중복인지를 파악하는 일은 쉽지 않다 -> 중복코드는 항상 함께 수정돼야 하기 때문에 수정할 때 하나라도 빠뜨린다면 버그로 이어질 것이다.
 * 더 큰 문제는 중복코드를 서로 다르게 수정하기 쉽다는 것이다 -> 예제에서 phone에서는 plus, NightlyDiscountPhone에서는 minus를 썻지만 알고 있던 사람은 없었을 것이다.
 * 중복 코드는 새로운 중복 코드를 부른다. 중복 코드를 제거하지 않은 상태에서 코드를 수정할 수 있는 유일한 방법은 새로운 중복 코드를 추가하는 것뿐이다.
 * 새로운 중복 코드를 추가하는 과정에서 코드의 일관성이 무너질 위험이 항상 도사리고 있다.
 * 더 큰 문제는 중복 코드가 늘어날수록 애플리케이션은 변경에 취약해지고 버그가 발생할 가능성이 높아진다는 것이다.
 * 민첩하게 변경하기 위해서는 중복 코드를 추가하는 대신 제거해야 한다.
 *
 * 상속을 이용해서 중복 코드 제거하기
 * 이미 존재하는 클래스와 유사한 클래스가 필요하다면 코드를 복사하지 말고 상속을 이용해 코드를 재사용하는 것이 상속의 기본 아이디어이다.
 * 개발자가 상속을 통해 구현한 코드 (calculateFee)에서는 일반 요금제에 따라 통화 요금을 계산한 후 이값에서 통화 시작 시간이 10시 이후인 통화의 요금을 뺴주어서 계산했다.
 * -> 개발자가 phone의 코드를 재사용하기 위해 세운 가정이다.
 * 이처럼 개발자의 가정을 이해하기 전에는 코드를 이해하기 어렵다.
 * 상속을 염두에 두고 설계되지 않은 클래스를 상속을 이용해 재사용하는 것은 생각처럼 쉽지 않다. 개발자는 재사용을 위해 상속 계층 사이에 무수히 많은 가정을 세웠을지 모른다.
 * 그리고 그 가정은 코드를 이해하기 어렵게 만들뿐만 아니라 직관에도 어긋날 수 있다.
 * 요구사항과 구현 사이의 차이가 크면 클수록 코드를 이해하기 어려워 지는데, 잘못 사용된 상속은 이 차이를 더 크게 벌린다.
 * 상속을 이용해 코드를 재사용하기 위해서는 부모 클래스의 개발자가 세웠던 가정이나 추론 과정을 정확하게 이해해야 한다. -> 자식 클래스의 작성자가 부모 클래스의 구현 방법에 대한 정확한 지식을 가져야함을 의미
 * 따라서 상속은 결합도를 높인다. 그리고 상속이 초래하는 부모 클래스와 자식 클래스 사이의 강한 결합이 코드를 수정하기 어렵게 만든다.
 *
 * 강하게 결합된 Phone과 NightDiscountPhone
 * 세금을 부과하는 로직을 추가하기 위해 Phone을 수정할 떄 유사한 코드를 NightlyDiscountPhone에도 추가해야 했다.
 * -> 코드 중복을 제거하기 위해 상속을 사용했음에도 세금을 계산하는 로직을 추가하기 위해 새로운 중복 코드를 만들어야 하는 것이다.
 * NightlyDiscountPhone이 Phone의 구현에 너무 강하게 결합돼 있기 때문에 발생하는 문제로 아래와 같은 경고에 주의해야한다.
 * - 자식 클래스의 메서드 안에서 super 참조를 이용해 부모 클래스의 메서드를 직접 호출할 경우 두 클래스는 강하게 결합된다. super 호출을 제거할 수 있는 방법을 찾아 결합도를 제거하라
 * 지금까지 예제를 보면 자식 클래스가 부모 클래스의 구현에 강하게 결합될 경우 부모 클래스의 변경에 자식 클래스가 영향을 받는다는 사실을 잘 보여준다.
 * 상속을 사용하면 적은 노력으로도 새로운 기능을 쉽고 빠르게 추가할 수 있다. 하지만 그로 인해 커다란 대가를 치러야 할 수 있다.
 * 상속 관계로 연결된 자식 클래스가 부모 클래스의 변경에 취약해지는 현상을 가리켜 취약한 기반 클래스 문제라고 부른다. -> 코드 재사용을 목적으로 상속을 사용할 때 발생하는 가장 대표적인 문제.
 *
 */
@SpringBootApplication
public class ObjectProjectApplication {
  public static void main(String[] args) {
    SpringApplication.run(ObjectProjectApplication.class, args);
  }
}
